"=====================
" Basic settings
"=====================
set number
set relativenumber
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent
set mouse=a
set autoread                " auto reload file if changed outside

"=====================
" Plugin manager
"=====================
call plug#begin('~/.vim/plugged')

" Gruvbox Theme
Plug 'morhetz/gruvbox'

" vim-airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" File explorer
Plug 'nvim-tree/nvim-tree.lua'
Plug 'nvim-tree/nvim-web-devicons'

" Telescope (Ctrl+P like fuzzy finder)
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-lua/plenary.nvim'

" Dart / Flutter
Plug 'dart-lang/dart-vim-plugin'
Plug 'akinsho/flutter-tools.nvim'

" LSP + completion
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'windwp/nvim-autopairs'

" Treesitter (better highlighting)
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

" Optional plugins
Plug 'folke/which-key.nvim'
Plug 'lewis6991/gitsigns.nvim'
Plug 'tpope/vim-fugitive'

call plug#end()

"=====================
" Config
"=====================

set background=dark
colorscheme gruvbox

" nvim-tree
lua << EOF
require("nvim-tree").setup {
  update_cwd = true,
  respect_buf_cwd = true,
}
EOF
nnoremap <C-n> :NvimTreeToggle<CR>

" telescope
nnoremap <C-p> <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" treesitter
lua << EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "dart", "lua", "vim", "json", "c", "html", "css", "typescript", "asm" },
  highlight = { enable = true },
}
EOF

"=====================
" LSP + Flutter setup
"=====================

" Setup on_attach function
lua << EOF
local on_attach = function(client, bufnr)
  local buf_map = function(mode, lhs, rhs)
      vim.api.nvim_buf_set_keymap(bufnr, mode, lhs, rhs, { noremap=true, silent=true })
  end
  -- LSP keymaps
  buf_map('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>')
  buf_map('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>')
  buf_map('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>')
  buf_map('n', '<C-.>', '<cmd>lua vim.lsp.buf.code_action()<CR>')
  buf_map('n', '<leader>f', '<cmd>lua vim.lsp.buf.formatting()<CR>') -- formatting
end

-- Setup capabilities for nvim-cmp
local capabilities = vim.lsp.protocol.make_client_capabilities()
local cmp_ok, cmp_nvim_lsp = pcall(require, 'cmp_nvim_lsp')
if cmp_ok then
    capabilities = cmp_nvim_lsp.default_capabilities(capabilities)
end

-- flutter-tools (includes dartls automatically)
require("flutter-tools").setup{
  lsp = {
    on_attach = on_attach,
    capabilities = capabilities,
    flags = {
      debounce_text_changes = 150,
    },
  },
}
EOF

"=====================
" LSP Setup for FASM
"=====================
lua << EOF
-- This code should go AFTER your flutter-tools setup block.
-- It reuses the 'on_attach' and 'capabilities' variables defined above.

local lspconfig = require('lspconfig')

-- Configure asm-lsp
lspconfig.asm_lsp.setup{
    on_attach = on_attach,
    capabilities = capabilities,
    filetypes = {'asm', 'fasm'}, -- Ensure it activates for FASM files
    
    -- Tell the LSP that our dialect is FASM
    root_dir = lspconfig.util.root_pattern('.git', '/'),
    settings = {
        asm_lsp = {
            dialect = "fasm"
        }
    }
}
EOF

" auto-pairs nvim brackets
lua << EOF
require("nvim-autopairs").setup {}
EOF

"=====================
" Auto-restart Dart LSP on RangeError
"=====================
lua << EOF

local default_handler = vim.lsp.handlers["window/showMessage"]

vim.lsp.handlers["window/showMessage"] = function(err, result, ctx, config)
  if result.message and result.message:match("RangeError: The edit extends past the end of the code") then
    vim.schedule(function()
      vim.cmd("LspRestart")
      print("⚡ dartls restarted due to RangeError")
    end)
  else
    default_handler(err, result, ctx, config)
  end
end
EOF

"=====================
" Completion (nvim-cmp)
"=====================
lua << EOF
local cmp = require'cmp'
cmp.setup {
  mapping = {
    ['<CR>'] = cmp.mapping.confirm({ select = true }),
    ['<Tab>'] = cmp.mapping.select_next_item(),
    ['<S-Tab>'] = cmp.mapping.select_prev_item(),
  },
  sources = {
    { name = 'nvim_lsp' },
  },
}
EOF

lua << EOF
local cmp_autopairs = require("nvim-autopairs.completion.cmp")
local cmp = require("cmp")
cmp.event:on("confirm_done", cmp_autopairs.on_confirm_done())
EOF


"=====================
" gitsigns
"=====================
lua << EOF
require('gitsigns').setup()
EOF

"=====================
" which-key
"=====================
lua << EOF
require("which-key").setup{}
EOF

"=====================
" Keymaps like VS Code
"=====================
" Select all
nnoremap <C-a> ggVG

autocmd BufWritePre *.dart lua vim.lsp.buf.format()
filetype plugin indent on

" Enable airline
let g:airline#extensions#tabline#enabled = 1      " show tabs in tabline
let g:airline#extensions#branch#enabled = 1
let g:airline_theme = 'molokai'

let g:airline_powerline_fonts = 1
let g:airline_symbols = {}
let g:airline_symbols.linenr = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'

